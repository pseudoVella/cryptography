//comparison operators
//equal
template <typename num_t>
bool ufp_t::operator==(const num_t& __n) const{
	uint8_t size = sizeof(__n);
	uint8_t pos;
	for(pos=0;pos<size;pos++){
		if(val[pos+byte_offset]!=((__n>>(pos<<3))&0xFF)) return false;
	}
	for(pos=byte_offset-1;pos<byte_offset;pos--){
		if(val[pos]) return false;
	}
	for(pos=size+byte_offset; pos<num_bytes; pos++){
		if(val[pos]) return false;
	}
	return true;
}

//not equal
template <typename num_t>
bool ufp_t::operator!=(const num_t& __n) const{
	uint8_t size = sizeof(__n);
	uint8_t pos;
	for(pos=0;pos<size;pos++){
		if(val[pos+byte_offset]!=((__n>>(pos<<3))&0xFF)) return true;
	}
	for(pos=byte_offset-1;pos<byte_offset;pos--){
		if(val[pos]) return true;
	}
	for(pos=size+byte_offset; pos<num_bytes; pos++){
		if(val[pos]) return true;
	}
	return false;
}

//greater or equal
template <typename num_t>
bool ufp_t::operator>=(const num_t& __n) const{
	uint8_t size = sizeof(__n);
	uint8_t pos;
	uint8_t tmp;
	for(pos = size-1; pos<size; pos--){
		tmp = ((__n>>(pos<<3))&0xFF);
		if(val[pos+byte_offset] > tmp) return true;
		else if(val[pos+byte_offset] < tmp) return false;
	}
	for(pos=byte_offset-1;pos<byte_offset;pos--){
		if(val[pos]) return true;
	}
	for(pos=size+byte_offset;pos<num_bytes;pos++){
		if(val[pos]) return true;
	}
	return true; //neither larger or smaller must be equal
}

//less or equal
template <typename num_t>
bool ufp_t::operator<=(const num_t& __n) const{
	uint8_t size = sizeof(__n);
	uint8_t pos;
	uint8_t tmp;
	for(pos = size-1; pos < size; pos--){
		tmp = ((__n>>(pos<<3))&0xFF);
		if(val[pos+byte_offset] > tmp) return false;
		else if(val[pos+byte_offset] < tmp) return true;
	}
	for(pos=byte_offset-1;pos<byte_offset;pos--){
		if(val[pos]) return false;
	}
	for(pos=size+byte_offset;pos<num_bytes;pos++){
		if(val[pos]) return false;
	}
	return true; //neither larger or smaller must be equal
}

//less
template <typename num_t>
bool ufp_t::operator<(const num_t& __n) const{
	uint8_t size = sizeof(__n);
	uint8_t pos;
	uint8_t tmp;
	for(pos = size-1; pos < size; pos--){
		tmp = ((__n>>(pos<<3))&0xFF);
		if(val[pos+byte_offset] > tmp) return false;
		else if(val[pos+byte_offset] < tmp) return true;
	}
	for(pos=byte_offset-1;pos<byte_offset;pos--){
		if(val[pos]) return false;
	}
	for(pos=size+byte_offset;pos<num_bytes;pos++){
		if(val[pos]) return false;
	}
	return false; //neither larger or smaller must be equal
}

//greater
template <typename num_t>
bool ufp_t::operator>(const num_t& __n) const{
	uint8_t size = sizeof(__n);
	uint8_t pos;
	uint8_t tmp;
	for(pos = size-1; pos < size; pos--){
		tmp = ((__n>>(pos<<3))&0xFF);
		if(val[pos+byte_offset] > tmp) return true;
		else if(val[pos+byte_offset] < tmp) return false;
	}
	for(pos=byte_offset-1;pos<byte_offset;pos--){
		if(val[pos]) return true;
	}
	for(pos=size+byte_offset;pos<num_bytes;pos++){
		if(val[pos]) return true;
	}
	return false; //neither larger or smaller must be equal
}

//assignment operators
//equals
template <typename num_t>
ufp_t& ufp_t::operator=(const num_t& __n){
	uint8_t size = sizeof(__n)+byte_offset;
	clear_all();
	uint8_t x = 0;
	for(uint8_t pos = byte_offset; pos<size; pos++){
		val[pos] = ((__n>>x)&0xff);
    x+=8;
  }
	return *this;
}

//addition
template <typename num_t>
ufp_t& ufp_t::operator+=(num_t __n){
	uint16_t tpos,pos=bit_offset;
	while(__n){
		if(CLbit(__n)){
			tpos = pos;
			while(checkbit(val, tpos)){
				cbit(val, tpos);
				tpos++;
			}
			sbit(val, tpos);
		}
		__n >>= 1U;
		pos++;
  }
	return *this;
}

//subtraction
template <typename num_t>
ufp_t& ufp_t::operator-=(num_t __n){
	uint16_t tpos,pos=bit_offset;
	while(__n){
		if(CLbit(__n)){
			tpos = pos;
			while(checkbit(val, tpos)==0){
				sbit(val, tpos);
				tpos++;
				if(tpos>num_bits) break;
			}
			cbit(val, tpos);
		}
		__n >>= 1;
		pos++;
  }
	return *this;
}

//multiplication
template <typename num_t>
ufp_t& ufp_t::operator*=(num_t __n){
	*this = *this * __n;
	return *this;
}

//division
template <typename num_t>
ufp_t& ufp_t::operator/=(const num_t& __n){
	*this = *this / __n;
	return *this;
}

//right shift
template <typename num_t>
ufp_t& ufp_t::operator>>=(const num_t& __n){
	uint8_t mask=(__n&7U), nmask=8U-mask, diff=(__n>>3);
	uint8_t pos, lpos=num_bytes-1U;
	for(pos=diff;pos<lpos;pos++){
		val[pos-diff]=((val[pos]>>mask)|(val[pos+1]<<nmask));
	}
	val[pos-diff]=(val[pos]>>mask);
	while(diff){
		val[num_bytes-diff] = 0U;
		diff--;
	}
	return *this;
}

//left shift
template <typename num_t>
ufp_t& ufp_t::operator<<=(const num_t& __n){
	uint8_t mask=(__n&7U), nmask=8U-mask, diff=(__n>>3);
	uint8_t pos;
	for(pos=num_bytes-(diff+1);pos>0;pos--){
		val[pos+diff]=( (val[pos]<<mask) | (val[pos-1]>>nmask) );
	}
	val[pos+diff]=(val[pos]<<mask);
	while(diff){
		val[diff-1U] = 0U;
		diff--;
	}
	return *this;
}

//AND
template <typename num_t>
ufp_t& ufp_t::operator&=(const num_t& __n){
	uint8_t size = sizeof(__n);
	for(uint8_t pos=0;pos<size;pos++){
		val[pos+byte_offset] &= ((__n>>(pos<<3))&0xFF);
	}
	return *this;
}

//OR
template <typename num_t>
ufp_t& ufp_t::operator|=(const num_t& __n){
	uint8_t size = sizeof(__n);
	for(uint8_t pos=0;pos<size;pos++){
		val[pos+byte_offset] |= ((__n>>(pos<<3))&0xFF);
	}
	return *this;
}

//XOR
template <typename num_t>
ufp_t& ufp_t::operator^=(const num_t& __n){
	uint8_t size = sizeof(__n);
	for(uint8_t pos=0;pos<size;pos++){
		val[pos+byte_offset] ^= ((__n>>(pos<<3))&0xFF);
	}
	return *this;
}

//regular operators
//AND
template <typename num_t>
ufp_t ufp_t::operator&(const num_t& __n) const{
	ufp_t res(*this);
	res &= __n;
	return res;
}

//OR
template <typename num_t>
ufp_t ufp_t::operator|(const num_t& __n) const{
	ufp_t res(*this);
	res |= __n;
	return res;
}

//XOR
template <typename num_t>
ufp_t ufp_t::operator^(const num_t& __n) const{
	ufp_t res(*this);
	res ^= __n;
	return res;
}

//shift right
template <typename num_t>
ufp_t ufp_t::operator>>(const num_t& __n) const{
	ufp_t res(*this);
	res >>= __n;
	return res;
}

//left shift
template <typename num_t>
ufp_t ufp_t::operator<<(const num_t& __n) const{
	ufp_t res(*this);
	res <<= __n;
	return res;
}

//addition
template <typename num_t>
ufp_t ufp_t::operator+(num_t __n) const{
	ufp_t res = *this;
	res += __n;
	return res;
}

//subtraction
template <typename num_t>
ufp_t ufp_t::operator-(num_t __n) const{
	ufp_t res = *this;
	res -= __n;
	return res;
}

//multiplication
template <typename num_t>
ufp_t ufp_t::operator*(num_t __n) const{
  ufp_t tmp;
	uint8_t bit = 0;
	while(__n){
	  if(CLbit(__n)) tmp += (*this << bit);
		bit++;
		__n>>=1;
  }
	return tmp;
}

//division
template <typename num_t>
ufp_t ufp_t::operator/(const num_t& __n) const{
	ufp_t quo;
	ufp_t rem;
	uint16_t bit;
	uint64_t frac=0;
  for(bit=num_bits-1;bit>=bit_offset;bit--){
    if(checkbit(val, bit)) rem |= 1U;
    if(rem >= __n){
      quo |= 1U;
      rem -= __n;
    }
    quo <<= 1U;
    rem <<= 1U;
  }
	quo>>=1U;
	for(bit=bit_offset-1;bit<bit_offset;bit--){
		if(checkbit(val, bit)) rem |= 1U;
		if(rem >= __n){
			frac |= 1U;
			rem -= __n;
		}
		frac <<= 1;
		rem <<= 1U;
	}
	frac>>=1;
	for(bit=0;bit<byte_offset;bit++){
		quo.val[bit]=((frac>>(bit<<3))&0xFF);
	}
  return quo;
}

//modulo
template <typename num_t>
ufp_t ufp_t::operator%(const num_t& __n) const{
	ufp_t res(0);
	res = *this & (__n-1U);
	return res;
}

template <typename num_t>
ufp_t& ufp_t::operator%=(const num_t& __n){
	*this &= (__n-1U);
	return *this;
}

//exponentiation
template <typename num_t>
ufp_t ufp_t::pow(num_t __n)const{
  ufp_t tmp(*this), res(1);
	while(__n){
	  if(CLbit(__n)){
			res *= tmp;
		}
		tmp *= tmp;
		__n>>=1;
  }
	return res;
}

//roots
template<typename num_t>
ufp_t ufp_t::rootn(const num_t& __n) const{
  ufp_t approx,napprox,fx,dx;
	napprox = (*this)/__n;
	while(napprox != approx){
		approx = napprox;
		fx = approx.pow<uint64_t>(__n);
		fx -= (*this);
		dx = approx.pow<uint64_t>(__n-1);
		dx *= __n;
		napprox -= fx/dx;
	}
	return approx;
}

/*bool ufp_t::almost_equals(const ufp_t& __n) const{
	for(uint8_t pos =1
}*/
